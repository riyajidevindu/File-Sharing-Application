import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.DataInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

public class Server {

	static ArrayList<MyFiles> myfiles = new ArrayList<>();
	
	public static void main(String[] args) {
		int fileId = 0;
		
		JFrame jFrame = new JFrame("Flie Sending Server");
		jFrame.setSize(400,400);
		jFrame.setLayout(new BoxLayout(jFrame.getContentPane(),BoxLayout.Y_AXIS));
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel jPanel = new JPanel();
		jPanel.setLayout(new BoxLayout(jPanel,BoxLayout.Y_AXIS));
		
		JScrollPane jScrolPane = new JScrollPane(jPanel);
		jScrolPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		
		JLabel jTitle = new JLabel("File Sharing Application Server Side");
		jTitle.setFont(new Font("Arial",Font.BOLD,25));
		jTitle.setBorder(new EmptyBorder(20,0,10,0));
		jTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
		
		jFrame.add(jTitle);
		jFrame.add(jScrolPane);
		jFrame.setVisible(true);
		
		
		ServerSocket serverSocket = new ServerSocket(1234);
		
		while(true) {
			try {
				
				Socket socket = serverSocket.accept();
				
				DataInputStream dataInputStream = new DataInputStream(socket.getInputStream());
				
				int fileNameLength = dataInputStream.readInt();
				
				if(fileNameLength>0) {
					byte[] fileNameBytes = new byte[fileNameLength];
					dataInputStream.readFully(fileNameBytes, 0, fileNameBytes.length);
					String fileName = new String(fileNameBytes);
					
					int fileContentLength = dataInputStream.readInt();
					
					if(fileContentLength>0) {
						byte[] fileContentBytes = new byte[fileContentLength];
						dataInputStream.readFully(fileContentBytes,0,fileContentLength);
						
						JPanel jpFileRow = new  JPanel();
						jpFileRow.setLayout(new BoxLayout(jpFileRow,BoxLayout.Y_AXIS));
						
						JLabel jlFileName = new JLabel(fileName);
						jlFileName.setFont(new Font("Arial",Font.BOLD,25));
						jlFileName.setBorder(new EmptyBorder(10,0,10,0));
						
						
						if (getFileNameExtension(fileName).equalsIgnoreCase("txt")) {
							jpFileRow.setName(String.valueOf(fileId));
							jpFileRow.addMouseListener(getMyMouseListener());
							
							jpFileRow.add(jlFileName);
							jPanel.add(jpFileRow);
							jFrame.validate();
						}
					}
				}
				
			}catch() {
				
			}
		}

	}
	
	public static MouseListener getMyMouseListener() {
		return new MouseListner() {
			@Override
			public void mouseClicked(MouseEvent e) {
				JPanel jPanel = (JPanel) e.getSource();
				
				int fileId = Integer.parseInt(jPanel.getName());
				
				for(MyFiles myFile:myfiles) {
					if(myFile.getId() == fileId) {
					
						JFrame jfPreview = createFrame();
						jfPreview.setVisible(true);
					}
				}
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				
			}
			
		};
		
	}
	
	
	
	public static String getFileNameExtension(String fileName) {
		int i = fileName.lastIndexOf('.');
		if(i>0) {
			return fileName.substring(i+1);
		}else {
			return "No extension found.";
		}
	}

}
